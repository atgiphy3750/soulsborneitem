{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx","Resources/Images/template.png"],"names":["App","useState","file","setFile","fileName","setFileName","forceDownload","blob","link","document","createElement","download","href","body","appendChild","click","remove","className","id","src","TemplateImage","alt","placeholder","onChange","e","target","value","contentEditable","draggable","type","name","files","reader","FileReader","readAsDataURL","onload","result","handleFileChange","accept","onClick","html2canvas","getElementById","then","canvas","url","fetch","headers","Headers","Origin","location","origin","mode","response","blobUrl","window","URL","createObjectURL","downloadUrl","toDataURL","Boolean","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message","module","exports"],"mappings":"iTA2FeA,MArFf,WAAgB,IAAD,EACWC,mBAAiB,IAD5B,mBACNC,EADM,KACAC,EADA,OAEmBF,mBAAiB,IAFpC,mBAENG,EAFM,KAEIC,EAFJ,KA+BPC,EAAgB,SAACC,GACrB,IAAIC,EAAOC,SAASC,cAAc,KAClCF,EAAKG,SAAwB,KAAbP,EAAkBA,EAAW,QAC7CI,EAAKI,KAAOL,EACZE,SAASI,KAAKC,YAAYN,GAC1BA,EAAKO,QACLP,EAAKQ,UAGP,OACE,yBAAKC,UAAU,OACb,yBAAKC,GAAG,UACN,yBAAKC,IAAKC,IAAeC,IAAI,aAC7B,2BACEJ,UAAU,gBACVK,YAAY,+CACZC,SAAU,SAACC,GACTnB,EAAYmB,EAAEC,OAAOC,UAGzB,yBAAKT,UAAU,sBAAsBU,iBAAiB,GAAtD,gDAGA,kBAAC,IAAD,KACE,6BACE,yBAAKV,UAAU,YAAYE,IAAKjB,EAAMmB,IAAI,GAAGO,UAAU,aAI7D,6BACE,yEACA,2BACEC,KAAK,OACLC,KAAK,OACLP,SAAU,SAACC,GAAD,OA7DO,SAACA,GACxB,GAAsB,MAAlBA,EAAEC,OAAOM,MAAe,CAC1B,IAAIC,EAAS,IAAIC,WACjBD,EAAOE,cAAcV,EAAEC,OAAOM,MAAM,IACpCC,EAAOG,OAAS,WACO,MAAjBH,EAAOI,QACTjC,EAAQ6B,EAAOI,UAuDEC,CAAiBb,IAClCc,OAAO,qCAET,4BACEC,QAAS,WACPC,IAAY/B,SAASgC,eAAe,WAA0BC,MAC5D,SAAUC,IAvDF,SAACC,GACnBC,MAAMD,EAAK,CACTE,QAAS,IAAIC,QAAQ,CAEnBC,OAAQC,SAASC,SAEnBC,KAAM,SAELT,MAAK,SAACU,GAAD,OAAcA,EAAS7C,UAC5BmC,MAAK,SAACnC,GACL,IAAI8C,EAAUC,OAAOC,IAAIC,gBAAgBjD,GACzCD,EAAc+C,MA8CNI,CADUd,EAAOe,UAAU,aAAc,UAJjD,qBC9DYC,QACW,cAA7BL,OAAOL,SAASW,UAEe,UAA7BN,OAAOL,SAASW,UAEhBN,OAAOL,SAASW,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFvD,SAASgC,eAAe,SDiIpB,kBAAmBwB,WACrBA,UAAUC,cAAcC,MACrBzB,MAAK,SAAA0B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBEjJ5BC,EAAOC,QAAU,IAA0B,uC","file":"static/js/main.0e73e6f8.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport TemplateImage from \"./Resources/Images/template.png\";\nimport html2canvas from \"html2canvas\";\nimport Draggable from \"react-draggable\";\nimport \"./App.css\";\n\nfunction App() {\n  const [file, setFile] = useState<string>(\"\");\n  const [fileName, setFileName] = useState<string>(\"\");\n\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files != null) {\n      let reader = new FileReader();\n      reader.readAsDataURL(e.target.files[0]);\n      reader.onload = () => {\n        if (reader.result != null) {\n          setFile(reader.result as string);\n        }\n      };\n    }\n  };\n\n  const downloadUrl = (url: string) => {\n    fetch(url, {\n      headers: new Headers({\n        // eslint-disable-next-line no-restricted-globals\n        Origin: location.origin,\n      }),\n      mode: \"cors\",\n    })\n      .then((response) => response.blob())\n      .then((blob) => {\n        let blobUrl = window.URL.createObjectURL(blob);\n        forceDownload(blobUrl);\n      });\n  };\n\n  const forceDownload = (blob: string) => {\n    let link = document.createElement(\"a\");\n    link.download = fileName !== \"\" ? fileName : \"Image\";\n    link.href = blob;\n    document.body.appendChild(link);\n    link.click();\n    link.remove();\n  };\n\n  return (\n    <div className=\"App\">\n      <div id=\"AppDiv\">\n        <img src={TemplateImage} alt=\"Template\"></img>\n        <input\n          className=\"text mainText\"\n          placeholder=\"아이템 이름 작성\"\n          onChange={(e) => {\n            setFileName(e.target.value);\n          }}\n        />\n        <div className=\"text discriptionDiv\" contentEditable={true}>\n          아이템 설명 작성\n        </div>\n        <Draggable>\n          <div>\n            <img className=\"itemImage\" src={file} alt=\"\" draggable=\"false\" />\n          </div>\n        </Draggable>\n      </div>\n      <div>\n        <span>이미지 넣기 ➡ </span>\n        <input\n          type=\"file\"\n          name=\"file\"\n          onChange={(e) => handleFileChange(e)}\n          accept=\".jpg,.png,.bmp,.webp,.heic,.heif\"\n        />\n        <button\n          onClick={() => {\n            html2canvas(document.getElementById(\"AppDiv\") as HTMLElement).then(\n              function (canvas) {\n                let url = canvas.toDataURL(\"image/jpeg\", 0.9);\n                downloadUrl(url);\n              }\n            );\n          }}\n        >\n          Download Image\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/template.b21a0879.png\";"],"sourceRoot":""}